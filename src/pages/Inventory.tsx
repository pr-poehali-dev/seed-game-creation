import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import Icon from "@/components/ui/icon";
import { Link } from "react-router-dom";

interface InventoryItem {
  id: string;
  name: string;
  icon: string;
  quantity: number;
  rarity: "common" | "rare" | "epic" | "legendary";
  description: string;
}

const Inventory = () => {
  const [selectedCategory, setSelectedCategory] = useState<
    "seeds" | "plants" | "tools" | "stats"
  >("seeds");

  const playerStats = {
    level: 12,
    experience: 1420,
    nextLevelExp: 1800,
    coins: 2450,
    plantsGrown: 67,
    seedsPlanted: 89,
    toolsUnlocked: 15,
  };

  const inventoryData = {
    seeds: [
      {
        id: "1",
        name: "–°–µ–º–µ–Ω–∞ –º–æ—Ä–∫–æ–≤–∏",
        icon: "ü•ï",
        quantity: 24,
        rarity: "common" as const,
        description: "–ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–µ —Å–µ–º–µ–Ω–∞",
      },
      {
        id: "2",
        name: "–°–µ–º–µ–Ω–∞ –ø–æ–º–∏–¥–æ—Ä–æ–≤",
        icon: "üçÖ",
        quantity: 8,
        rarity: "common" as const,
        description: "–°–æ—á–Ω—ã–µ –∫—Ä–∞—Å–Ω—ã–µ —Ç–æ–º–∞—Ç—ã",
      },
      {
        id: "3",
        name: "–°–µ–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤",
        icon: "üå∏",
        quantity: 15,
        rarity: "rare" as const,
        description: "–ö—Ä–∞—Å–∏–≤—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç—ã",
      },
    ],
    plants: [
      {
        id: "5",
        name: "–°–ø–µ–ª—ã–π —Ç–æ–º–∞—Ç",
        icon: "üçÖ",
        quantity: 12,
        rarity: "common" as const,
        description: "–°–≤–µ–∂–∏–µ —Ç–æ–º–∞—Ç—ã",
      },
      {
        id: "6",
        name: "–¶–≤–µ—Ç—É—â–∞—è —Ä–æ–∑–∞",
        icon: "üåπ",
        quantity: 5,
        rarity: "rare" as const,
        description: "–ö—Ä–∞—Å–∏–≤–∞—è —Ä–æ–∑–∞",
      },
      {
        id: "7",
        name: "–ó–æ–ª–æ—Ç–∞—è –º–æ—Ä–∫–æ–≤—å",
        icon: "ü•ï",
        quantity: 3,
        rarity: "epic" as const,
        description: "–í–æ–ª—à–µ–±–Ω–∞—è –º–æ—Ä–∫–æ–≤—å",
      },
    ],
    tools: [
      {
        id: "8",
        name: "–õ–æ–ø–∞—Ç–∞",
        icon: "üî®",
        quantity: 1,
        rarity: "common" as const,
        description: "–û–±—ã—á–Ω–∞—è –ª–æ–ø–∞—Ç–∞",
      },
      {
        id: "9",
        name: "–í–æ–ª—à–µ–±–Ω–∞—è –ª–µ–π–∫–∞",
        icon: "ü™£",
        quantity: 1,
        rarity: "epic" as const,
        description: "–£—Å–∫–æ—Ä—è–µ—Ç —Ä–æ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π",
      },
      {
        id: "10",
        name: "–°–µ–∫–∞—Ç–æ—Ä",
        icon: "‚úÇÔ∏è",
        quantity: 1,
        rarity: "rare" as const,
        description: "–¢–æ—á–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞",
      },
    ],
  };

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case "common":
        return "bg-gray-100 text-gray-800";
      case "rare":
        return "bg-blue-100 text-blue-800";
      case "epic":
        return "bg-purple-100 text-purple-800";
      case "legendary":
        return "bg-yellow-100 text-yellow-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const categories = [
    { id: "seeds" as const, label: "–°–µ–º–µ–Ω–∞", icon: "Seedling" },
    { id: "plants" as const, label: "–†–∞—Å—Ç–µ–Ω–∏—è", icon: "Flower" },
    { id: "tools" as const, label: "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", icon: "Wrench" },
    { id: "stats" as const, label: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", icon: "BarChart3" },
  ];

  const renderInventoryGrid = (items: InventoryItem[]) => (
    <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
      {items.map((item) => (
        <Card
          key={item.id}
          className="hover:shadow-lg transition-all duration-300 hover:scale-105 cursor-pointer"
        >
          <CardContent className="p-4 text-center">
            <div className="text-3xl mb-2">{item.icon}</div>
            <div className="text-sm font-medium mb-1">{item.name}</div>
            <Badge className={`text-xs mb-2 ${getRarityColor(item.rarity)}`}>
              {item.rarity}
            </Badge>
            <div className="text-lg font-bold text-primary">
              √ó{item.quantity}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );

  const renderStats = () => (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center gap-2">
              <Icon name="Star" size={20} />
              –£—Ä–æ–≤–µ–Ω—å
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-primary mb-2">
              {playerStats.level}
            </div>
            <Progress
              value={(playerStats.experience / playerStats.nextLevelExp) * 100}
              className="mb-2"
            />
            <div className="text-sm text-gray-600">
              {playerStats.experience} / {playerStats.nextLevelExp} –æ–ø—ã—Ç–∞
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center gap-2">
              <Icon name="Coins" size={20} />
              –ú–æ–Ω–µ—Ç—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-yellow-600">
              {playerStats.coins}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-lg flex items-center gap-2">
              <Icon name="Sprout" size={20} />
              –í—ã—Ä–∞—â–µ–Ω–æ
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-green-600">
              {playerStats.plantsGrown}
            </div>
            <div className="text-sm text-gray-600">—Ä–∞—Å—Ç–µ–Ω–∏–π</div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Seedling" size={20} />
              –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex justify-between items-center">
              <span>–ü–æ—Å–∞–∂–µ–Ω–æ —Å–µ–º—è–Ω</span>
              <Badge variant="secondary">{playerStats.seedsPlanted}</Badge>
            </div>
            <div className="flex justify-between items-center">
              <span>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ</span>
              <Badge variant="secondary">{playerStats.toolsUnlocked}</Badge>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Trophy" size={20} />
              –ù–∞–≥—Ä–∞–¥—ã
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center text-gray-500">
              <Icon name="Lock" size={32} className="mx-auto mb-2" />
              <div>–ù–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —Å–∫–æ—Ä–æ!</div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-4xl font-bold text-gray-800 mb-2">
              üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
            </h1>
            <p className="text-gray-600">
              –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            </p>
          </div>
          <Link to="/">
            <Button variant="outline" className="flex items-center gap-2">
              <Icon name="Home" size={18} />–í —Å–∞–¥
            </Button>
          </Link>
        </div>

        {/* Player Level Bar */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-xl">
                  {playerStats.level}
                </div>
                <div>
                  <div className="font-semibold">
                    –°–∞–¥–æ–≤–Ω–∏–∫ —É—Ä–æ–≤–Ω—è {playerStats.level}
                  </div>
                  <div className="text-sm text-gray-600">
                    {playerStats.experience} / {playerStats.nextLevelExp} –æ–ø—ã—Ç–∞
                  </div>
                </div>
              </div>
              <div className="flex items-center gap-2 text-yellow-600">
                <Icon name="Coins" size={20} />
                <span className="font-bold">{playerStats.coins}</span>
              </div>
            </div>
            <Progress
              value={(playerStats.experience / playerStats.nextLevelExp) * 100}
            />
          </CardContent>
        </Card>

        {/* Category Tabs */}
        <div className="flex gap-2 mb-6 overflow-x-auto">
          {categories.map((category) => (
            <Button
              key={category.id}
              variant={selectedCategory === category.id ? "default" : "outline"}
              onClick={() => setSelectedCategory(category.id)}
              className="flex items-center gap-2 whitespace-nowrap"
            >
              <Icon name={category.icon as any} size={18} />
              {category.label}
            </Button>
          ))}
        </div>

        {/* Content */}
        <div className="animate-fade-in">
          {selectedCategory === "stats" ? (
            renderStats()
          ) : (
            <div>
              <div className="mb-4">
                <h2 className="text-2xl font-bold text-gray-800 mb-2">
                  {categories.find((c) => c.id === selectedCategory)?.label}
                </h2>
                <p className="text-gray-600">
                  {selectedCategory === "seeds" &&
                    "–°–µ–º–µ–Ω–∞ –¥–ª—è –ø–æ—Å–∞–¥–∫–∏ –Ω–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π"}
                  {selectedCategory === "plants" &&
                    "–í—ã—Ä–∞—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —É—Ä–æ–∂–∞–π"}
                  {selectedCategory === "tools" &&
                    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å–∞–¥—É"}
                </p>
              </div>
              {renderInventoryGrid(inventoryData[selectedCategory])}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Inventory;
